using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace UnityEngine.Rendering
{

public class CommandBuffer : IDisposable
{
    public string name { get; set; }
    public int sizeInBytes { get; }

    public CommandBuffer();

    public void BeginSample(string name);
    public void Blit(Rendering.RenderTargetIdentifier source, Rendering.RenderTargetIdentifier dest);
    public void Blit(Texture source, Rendering.RenderTargetIdentifier dest);
    public void Blit(Rendering.RenderTargetIdentifier source, Rendering.RenderTargetIdentifier dest, Material mat);
    public void Blit(Texture source, Rendering.RenderTargetIdentifier dest, Material mat);
    public void Blit(Rendering.RenderTargetIdentifier source, Rendering.RenderTargetIdentifier dest, Material mat, int pass);
    public void Blit(Texture source, Rendering.RenderTargetIdentifier dest, Material mat, int pass);
    public void Blit(Rendering.RenderTargetIdentifier source, Rendering.RenderTargetIdentifier dest, Vector2 scale, Vector2 offset);
    public void Blit(Texture source, Rendering.RenderTargetIdentifier dest, Vector2 scale, Vector2 offset);
    public void Clear();
    public void ClearRandomWriteTargets();
    public void ClearRenderTarget(bool clearDepth, bool clearColor, Color backgroundColor);
    public void ClearRenderTarget(bool clearDepth, bool clearColor, Color backgroundColor, float depth);
    public void ConvertTexture(Rendering.RenderTargetIdentifier src, Rendering.RenderTargetIdentifier dst);
    public void ConvertTexture(Rendering.RenderTargetIdentifier src, int srcElement, Rendering.RenderTargetIdentifier dst, int dstElement);
    public void CopyCounterValue(ComputeBuffer src, ComputeBuffer dst, uint dstOffsetBytes);
    public void CopyTexture(Rendering.RenderTargetIdentifier src, Rendering.RenderTargetIdentifier dst);
    public void CopyTexture(Rendering.RenderTargetIdentifier src, int srcElement, Rendering.RenderTargetIdentifier dst, int dstElement);
    public void CopyTexture(Rendering.RenderTargetIdentifier src, int srcElement, int srcMip, Rendering.RenderTargetIdentifier dst, int dstElement, int dstMip);
    public void CopyTexture(Rendering.RenderTargetIdentifier src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, Rendering.RenderTargetIdentifier dst, int dstElement, int dstMip, int dstX, int dstY);
    public Rendering.GPUFence CreateGPUFence();
    public Rendering.GPUFence CreateGPUFence(Rendering.SynchronisationStage stage);
    public void DisableScissorRect();
    public void DisableShaderKeyword(string keyword);
    public void DispatchCompute(ComputeShader computeShader, int kernelIndex, ComputeBuffer indirectBuffer, uint argsOffset);
    public void DispatchCompute(ComputeShader computeShader, int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ);
    public void Dispose();
    public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material);
    public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int submeshIndex);
    public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int submeshIndex, int shaderPass);
    public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int submeshIndex, int shaderPass, MaterialPropertyBlock properties);
    public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, int shaderPass, Matrix4x4[] matrices);
    public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, int shaderPass, Matrix4x4[] matrices, int count);
    public void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, int shaderPass, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties);
    public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, int shaderPass, ComputeBuffer bufferWithArgs);
    public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, int shaderPass, ComputeBuffer bufferWithArgs, int argsOffset);
    public void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, int shaderPass, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties);
    public void DrawProcedural(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, int vertexCount);
    public void DrawProcedural(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, int vertexCount, int instanceCount);
    public void DrawProcedural(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, int vertexCount, int instanceCount, MaterialPropertyBlock properties);
    public void DrawProceduralIndirect(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, ComputeBuffer bufferWithArgs);
    public void DrawProceduralIndirect(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, ComputeBuffer bufferWithArgs, int argsOffset);
    public void DrawProceduralIndirect(Matrix4x4 matrix, Material material, int shaderPass, MeshTopology topology, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties);
    public void DrawRenderer(Renderer renderer, Material material);
    public void DrawRenderer(Renderer renderer, Material material, int submeshIndex);
    public void DrawRenderer(Renderer renderer, Material material, int submeshIndex, int shaderPass);
    public void EnableScissorRect(Rect scissor);
    public void EnableShaderKeyword(string keyword);
    public void EndSample(string name);
    public void GenerateMips(RenderTexture rt);
    public void GetTemporaryRT(int nameID, RenderTextureDescriptor desc);
    public void GetTemporaryRT(int nameID, RenderTextureDescriptor desc, FilterMode filter);
    public void GetTemporaryRT(int nameID, int width, int height);
    public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer);
    public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter);
    public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format);
    public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite);
    public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing);
    public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite);
    public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite, RenderTextureMemoryless memorylessMode);
    public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite, RenderTextureMemoryless memorylessMode, bool useDynamicScale);
    public void GetTemporaryRTArray(int nameID, int width, int height, int slices);
    public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer);
    public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, FilterMode filter);
    public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, FilterMode filter, RenderTextureFormat format);
    public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite);
    public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing);
    public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite);
    public void GetTemporaryRTArray(int nameID, int width, int height, int slices, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite, bool useDynamicScale);
    public void IssuePluginCustomBlit(IntPtr callback, uint command, Rendering.RenderTargetIdentifier source, Rendering.RenderTargetIdentifier dest, uint commandParam, uint commandFlags);
    public void IssuePluginCustomTextureUpdate(IntPtr callback, Texture targetTexture, uint userData);
    public void IssuePluginCustomTextureUpdateV1(IntPtr callback, Texture targetTexture, uint userData);
    public void IssuePluginCustomTextureUpdateV2(IntPtr callback, Texture targetTexture, uint userData);
    public void IssuePluginEvent(IntPtr callback, int eventID);
    public void IssuePluginEventAndData(IntPtr callback, int eventID, IntPtr data);
    public void Release();
    public void ReleaseTemporaryRT(int nameID);
    public void RequestAsyncReadback(ComputeBuffer src, Action<Rendering.AsyncGPUReadbackRequest> callback);
    public void RequestAsyncReadback(Texture src, Action<Rendering.AsyncGPUReadbackRequest> callback);
    public void RequestAsyncReadback(Texture src, int mipIndex, Action<Rendering.AsyncGPUReadbackRequest> callback);
    public void RequestAsyncReadback(Texture src, int mipIndex, TextureFormat dstFormat, Action<Rendering.AsyncGPUReadbackRequest> callback);
    public void RequestAsyncReadback(ComputeBuffer src, int size, int offset, Action<Rendering.AsyncGPUReadbackRequest> callback);
    public void RequestAsyncReadback(Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, Action<Rendering.AsyncGPUReadbackRequest> callback);
    public void RequestAsyncReadback(Texture src, int mipIndex, int x, int width, int y, int height, int z, int depth, TextureFormat dstFormat, Action<Rendering.AsyncGPUReadbackRequest> callback);
    public void ResolveAntiAliasedSurface(RenderTexture rt, RenderTexture target = null);
    public void SetComputeBufferParam(ComputeShader computeShader, int kernelIndex, string name, ComputeBuffer buffer);
    public void SetComputeBufferParam(ComputeShader computeShader, int kernelIndex, int nameID, ComputeBuffer buffer);
    public void SetComputeFloatParam(ComputeShader computeShader, string name, float val);
    public void SetComputeFloatParam(ComputeShader computeShader, int nameID, float val);
    public void SetComputeFloatParams(ComputeShader computeShader, string name, float[] values);
    public void SetComputeFloatParams(ComputeShader computeShader, int nameID, float[] values);
    public void SetComputeIntParam(ComputeShader computeShader, string name, int val);
    public void SetComputeIntParam(ComputeShader computeShader, int nameID, int val);
    public void SetComputeIntParams(ComputeShader computeShader, string name, int[] values);
    public void SetComputeIntParams(ComputeShader computeShader, int nameID, int[] values);
    public void SetComputeMatrixArrayParam(ComputeShader computeShader, string name, Matrix4x4[] values);
    public void SetComputeMatrixArrayParam(ComputeShader computeShader, int nameID, Matrix4x4[] values);
    public void SetComputeMatrixParam(ComputeShader computeShader, string name, Matrix4x4 val);
    public void SetComputeMatrixParam(ComputeShader computeShader, int nameID, Matrix4x4 val);
    public void SetComputeTextureParam(ComputeShader computeShader, int kernelIndex, string name, Rendering.RenderTargetIdentifier rt);
    public void SetComputeTextureParam(ComputeShader computeShader, int kernelIndex, int nameID, Rendering.RenderTargetIdentifier rt);
    public void SetComputeTextureParam(ComputeShader computeShader, int kernelIndex, string name, Rendering.RenderTargetIdentifier rt, int mipLevel);
    public void SetComputeTextureParam(ComputeShader computeShader, int kernelIndex, int nameID, Rendering.RenderTargetIdentifier rt, int mipLevel);
    public void SetComputeVectorArrayParam(ComputeShader computeShader, string name, Vector4[] values);
    public void SetComputeVectorArrayParam(ComputeShader computeShader, int nameID, Vector4[] values);
    public void SetComputeVectorParam(ComputeShader computeShader, string name, Vector4 val);
    public void SetComputeVectorParam(ComputeShader computeShader, int nameID, Vector4 val);
    public void SetGlobalBuffer(string name, ComputeBuffer value);
    public void SetGlobalBuffer(int nameID, ComputeBuffer value);
    public void SetGlobalColor(string name, Color value);
    public void SetGlobalColor(int nameID, Color value);
    public void SetGlobalDepthBias(float bias, float slopeBias);
    public void SetGlobalFloat(string name, float value);
    public void SetGlobalFloat(int nameID, float value);
    public void SetGlobalFloatArray(int nameID, List<float> values);
    public void SetGlobalFloatArray(int nameID, float[] values);
    public void SetGlobalFloatArray(string propertyName, List<float> values);
    public void SetGlobalFloatArray(string propertyName, float[] values);
    public void SetGlobalInt(string name, int value);
    public void SetGlobalInt(int nameID, int value);
    public void SetGlobalMatrix(string name, Matrix4x4 value);
    public void SetGlobalMatrix(int nameID, Matrix4x4 value);
    public void SetGlobalMatrixArray(int nameID, List<Matrix4x4> values);
    public void SetGlobalMatrixArray(int nameID, Matrix4x4[] values);
    public void SetGlobalMatrixArray(string propertyName, List<Matrix4x4> values);
    public void SetGlobalMatrixArray(string propertyName, Matrix4x4[] values);
    public void SetGlobalTexture(string name, Rendering.RenderTargetIdentifier value);
    public void SetGlobalTexture(int nameID, Rendering.RenderTargetIdentifier value);
    public void SetGlobalVector(string name, Vector4 value);
    public void SetGlobalVector(int nameID, Vector4 value);
    public void SetGlobalVectorArray(int nameID, List<Vector4> values);
    public void SetGlobalVectorArray(int nameID, Vector4[] values);
    public void SetGlobalVectorArray(string propertyName, List<Vector4> values);
    public void SetGlobalVectorArray(string propertyName, Vector4[] values);
    public void SetInvertCulling(bool invertCulling);
    public void SetProjectionMatrix(Matrix4x4 proj);
    public void SetRandomWriteTarget(int index, ComputeBuffer buffer);
    public void SetRandomWriteTarget(int index, Rendering.RenderTargetIdentifier rt);
    public void SetRandomWriteTarget(int index, ComputeBuffer buffer, bool preserveCounterValue);
    public void SetRenderTarget(Rendering.RenderTargetBinding binding);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier rt);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier color, Rendering.RenderTargetIdentifier depth);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier[] colors, Rendering.RenderTargetIdentifier depth);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier rt, int mipLevel);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier color, Rendering.RenderTargetIdentifier depth, int mipLevel);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier rt, Rendering.RenderBufferLoadAction loadAction, Rendering.RenderBufferStoreAction storeAction);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier rt, int mipLevel, CubemapFace cubemapFace);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier color, Rendering.RenderTargetIdentifier depth, int mipLevel, CubemapFace cubemapFace);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier rt, int mipLevel, CubemapFace cubemapFace, int depthSlice);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier color, Rendering.RenderTargetIdentifier depth, int mipLevel, CubemapFace cubemapFace, int depthSlice);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier rt, Rendering.RenderBufferLoadAction colorLoadAction, Rendering.RenderBufferStoreAction colorStoreAction, Rendering.RenderBufferLoadAction depthLoadAction, Rendering.RenderBufferStoreAction depthStoreAction);
    public void SetRenderTarget(Rendering.RenderTargetIdentifier color, Rendering.RenderBufferLoadAction colorLoadAction, Rendering.RenderBufferStoreAction colorStoreAction, Rendering.RenderTargetIdentifier depth, Rendering.RenderBufferLoadAction depthLoadAction, Rendering.RenderBufferStoreAction depthStoreAction);
    public void SetShadowSamplingMode(Rendering.RenderTargetIdentifier shadowmap, Rendering.ShadowSamplingMode mode);
    public void SetViewMatrix(Matrix4x4 view);
    public void SetViewport(Rect pixelRect);
    public void SetViewProjectionMatrices(Matrix4x4 view, Matrix4x4 proj);
    public void WaitOnGPUFence(Rendering.GPUFence fence);
    public void WaitOnGPUFence(Rendering.GPUFence fence, Rendering.SynchronisationStage stage);

}

}
